<!-- views/alerts.ejs -->

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://kit.fontawesome.com/23c5cf9afa.js" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Helvetica:wght@400;700&display=swap">
    <link rel="icon" href="/favicon.ico" type="image/x-icon">
    <title>Status Alerts | Dashboard</title>
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            font-family: 'Helvetica', sans-serif;
            background-color: #16191c;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            color: #fff;
            line-height: 1.6;
        }

        #main-content {
            display: flex;
            flex-grow: 1;
            overflow-x: hidden;
            width: 100%;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .home-container {
            background-color: #1e2126;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            box-sizing: border-box;
            padding: 40px;
            max-width: 1200px;
            width: 100%;
            margin-top: 20px;
            position: relative;
        }

        .home-container h1 {
            color: #5e99ff;
            margin: 20px 0;
            text-align: center;
            display: block;
            font-size: 2em;
            margin-block-start: 0.67em;
            margin-block-end: 0.67em;
            margin-inline-start: 0px;
            margin-inline-end: 0px;
            font-weight: bold;
        }

    .text-muted {
    color: #8c8c8c; /* Adjust the color of the explanatory text */
    font-size: 1rem; /* Adjust the font size of the explanatory text */
    text-align: center;
}

    :root {
    --primary-color: #0d6efd;
    --secondary-color: #6c757d;
    --background-color: #121212;
    --text-color: #ffffff;
    --alert-color: #0d6efd;
    --success-color: #28a745;
    --error-color: #dc3545;
    --warning-color: #ffc107;
}

.navbar {
    background-color: #1F1F1F;
}

.btn {
    border-radius: 5px;
    padding: 10px 18px;
}

.btn-primary {
    background-color: #0d6efd;
    border: none;
}

.btn-danger {
    border: none;
}
 
.btn-primary:hover {
    background-color: #0b5ed7;
}

.alert-online {
    border-left: 5px solid green;
}

.alert-offline {
    border-left: 5px solid red;
}

.alert-pending {
    border-left: 5px solid blue;
}

.alert-block {
    flex: 0 0 calc(33.33% - 10px); 
    background-color: #222;
    padding: 20px;
    border-radius: 4px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    cursor: pointer;
    transition: all 0.3s ease;
    margin-bottom: 10px;
    margin-right: 10px;
}

.alert-title {
    font-size: 1.25rem;
    color: #0d6efd;
}

.alert-info {
  font-size: 1rem;
  color: #adb5bd;
  background: none;
  max-width: 90%;
}

#manage-alerts,
#add-alert {
    background-color: transparent;
    padding: 20px;
    border-radius: 5px;
    margin-bottom: 30px;
}

@media (max-width: 768px) {
    .btn {
        width: 100%;
        margin-bottom: 10px;
    }
}

.toast-container .toast {
    align-items: center;
    border: 0;
}

.toast-success {
    background-color: #28a745;
    color: #000000;
}

.toast-error {
    background-color: #dc3545;
    color: #000000;
}

.toast-delete {
    background-color: #FF7F7F;
    color: #000000;
}

#no-alerts-placeholder {
    padding: 20px;
    text-align: center;
}

#no-alerts-placeholder p {
    font-size: 1rem;
    color: #adb5bd;
}

a,
button,
.input-group-text,
.form-control {
    transition: background-color 0.3s, color 0.3s, border-color 0.3s;
}
.btn:hover {
    transform: scale(1.05); 
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1); 
}

.modal-content {
    transition: transform 0.3s ease-out;
    transform-origin: top;
}

.modal.show .modal-content {
    transform: scale(1.05); 
}

.alert-block:hover {
    background-color: #333;
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
}
#footer a {
    color: none; /* Reset the anchor tag color to white */
    text-decoration: none; /* Remove the default underline */
}

#footer a:hover {
    text-decoration: none; /* Add underline on hover if needed */
}
    </style>

</head>

<body>
    <%- include('partials/header', { user: user, currentPage: 'alerts' }) %>

    <div id="main-content">
        <div class="home-container">
            <h1>Status Alerts</h1>
            <p class="text-muted mb-4">
                This system checks if your service has gone offline or online and notifies you in Discord.
            </p>


            <div class="toast-container position-fixed bottom-0 end-0 p-3" id="toastContainer">
                <!-- Success Toast -->
                <div id="toastSuccess" class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
                  <div class="d-flex">
                    <div class="toast-body">Your action was successful.</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                  </div>
                </div>
                <!-- Error Toast -->
                <div id="toastError" class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
                  <div class="d-flex">
                    <div class="toast-body">There was an error processing your request.</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                  </div>
                </div>
                <!-- Delete Toast -->
                <div id="toastDelete" class="toast align-items-center text-white bg-warning border-0" role="alert" aria-live="assertive" aria-atomic="true">
                  <div class="d-flex">
                    <div class="toast-body">Your action was successful.</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                  </div>
                </div>
              </div>
              <!-- Main Content -->
              <div class="container mt-4 main-content">
                <!-- Add New Alert Section -->
                <section id="add-alert" class="p-4 rounded shadow">
                  <h2>Add New Alert</h2>
                  <form id="new-alert-form" class="mb-4">
                    <div class="row">
                      <div class="col-md-3 mb-3">
                        <input type="text" class="form-control" id="serviceName" placeholder="Service Name" required>
                      </div>
                      <div class="col-md-3 mb-3">
                        <input type="text" class="form-control" id="serverAddress" placeholder="Address or Bot ID" required>
                      </div>
                      <div class="col-md-3 mb-3">
                        <select class="form-select" id="alertType" onchange="validateAlertInputs()" required>
                          <option value="" disabled selected>Select Service</option>
                          <option value="minecraft">Minecraft</option>
                          <option value="bots">Bots</option>
                          <option value="website">Website</option>
                        </select>
                      </div>
                      <div class="col-md-3 mb-3">
                        <select class="form-select alert-dropdown" id="channelId" required>
                          <option value="" disabled selected>Select Channel</option>
                          <!-- Channels populated via JavaScript -->
                        </select>
                      </div>
                    </div>
                    <button type="submit" class="btn btn-primary">Create Alert</button>
                  </form>
                </section>
                <!-- Manage Alerts Section -->
                <section id="manage-alerts" class="p-4 rounded shadow">
                  <h2 class="mb-4">Manage Alerts</h2>
                  <div id="alerts-list" class="row">
                    <!-- Alerts will be populated via JavaScript -->
                  </div>
                  <div id="no-alerts-placeholder" class="text-center" style="display: none;">
                    <p>It looks like you have no alerts! Start by creating one!</p>
                  </div>
                </section>
              </div>
              <!-- Update Alert Modal -->
              <div class="modal fade" id="updateAlertModal" tabindex="-1" aria-labelledby="updateAlertModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                  <div class="modal-content bg-dark text-white">
                    <div class="modal-header border-bottom border-secondary">
                      <h5 class="modal-title" id="updateAlertModalLabel">Update Alert</h5>
                      <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                      <form id="update-alert-form">
                        <input type="hidden" id="updateAlertId">
                        <div class="mb-3">
                          <label for="updateServiceName" class="form-label">Service Name</label>
                          <input type="text" class="form-control" id="updateServiceName" required>
                        </div>
                        <div class="mb-3">
                          <label for="updateServerAddress" class="form-label">Server Address</label>
                          <input type="text" class="form-control" id="updateServerAddress" required>
                        </div>
                        <div class="mb-3">
                          <label for="updateAlertType" class="form-label">Alert Type</label>
                          <select class="form-select" id="updateAlertType">
                            <option value="minecraft">Minecraft</option>
                            <option value="bots">Bots</option>
                            <option value="website">Website</option>
                          </select>
                        </div>
                        <div class="mb-3">
                          <label for="updateChannelId" class="form-label">Discord Channel ID</label>
                          <select class="form-select" id="updateChannelId" required>
                            <!-- Options retrieved via js -->
                          </select>
                        </div>
                      </form>
                    </div>
                    <div class="modal-footer border-top border-secondary">
                      <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                      <button type="button" class="btn btn-primary" onclick="submitUpdateAlert()">Save changes</button>
                    </div>
                  </div>
                </div>
              </div>
              <!-- Delete Confirmation Modal -->
              <div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                  <div class="modal-content bg-dark text-white">
                    <div class="modal-header border-bottom border-secondary">
                      <h5 class="modal-title" id="confirmDeleteModalLabel">Confirm Delete</h5>
                      <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">Are you sure you want to delete this alert?</div>
                    <div class="modal-footer border-top border-secondary">
                      <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                      <button type="button" class="btn btn-danger" id="confirmDeleteButton">Delete</button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
        </div>
    </div>


<script>

function isValidMinecraftAddress(address) {
  const ipPortRegex = /^(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}(?::[0-9]{1,5})?|([a-zA-Z0-9.-]+))$/;
  return ipPortRegex.test(address);
}

function isValidBotID(botID) {
  return /^[0-9]+$/.test(botID);
}

function isValidWebsiteAddress(address) {
  const urlRegex = /^(http:\/\/|https:\/\/)[a-zA-Z0-9]+([\-\.]{1}[a-zA-Z0-9]+)*\.[a-zA-Z]{2,5}(:[0-9]{1,5})?(\/.*)?$/;
  return urlRegex.test(address);
}

function validateAlertInputs(alertType, serverAddress) {
  if (alertType === 'website' && !isValidWebsiteAddress(serverAddress)) {
    showToast('toastError', "Please enter a valid website address (e.g., http://example.com)");
    return false;
  }

  if (alertType === 'minecraft' && !isValidMinecraftAddress(serverAddress)) {
    showToast('toastError', "Please enter a valid Minecraft server address (IP:Port or Domain)");
    return false;
  }

  if (alertType === 'bots' && !isValidBotID(serverAddress)) {
    showToast('toastError', "Please enter a valid 18-digit Bot Client ID");
    return false;
  }

  return true;
}

document.getElementById('alertType').addEventListener('change', validateAlertInputs);

validateAlertInputs();

// Loads channels from the server and populates the channels dropdown.
function loadChannels() {
  fetch('/api/discord/channels')
    .then(response => response.json())
    .then(channels => {
      const channelsDropdown = document.getElementById('channelId');
      channels.forEach(channel => {
        const option = document.createElement('option');
        option.value = channel.id;
        option.textContent = channel.name;
        channelsDropdown.appendChild(option);
      });
    })
    .catch(error => {
      console.error('Error loading channels:', error);
    });
}

function updateAlertStatusUI(alertId, newStatus) {
  const alertElement = document.querySelector(`.alert-item[data-alert-id="${alertId}"]`);
  if (alertElement) {
    alertElement.classList.remove('alert-online', 'alert-offline', 'alert-pending');

    if (newStatus === 'Online') {
      alertElement.classList.add('alert-online');
    } else if (newStatus === 'Offline') {
      alertElement.classList.add('alert-offline');
    } else {
      alertElement.classList.add('alert-pending');
    }
  }
}

function refreshAlertsStatus() {
  fetch('/api/alerts').then(response => response.json()).then(alerts => {
    alerts.forEach(alert => {
      updateAlertStatusUI(alert.alertId, alert.status);
    });
  }).catch(error => {
    console.error('Error loading alerts:', error);
  });
}

// Refresh status every 10 seconds
setInterval(refreshAlertsStatus, 10000);

document.addEventListener('DOMContentLoaded', async function() {
  await loadChannels();
  await loadAlerts();
  setupFormListeners();
  setupEventListeners();
});

// Sets up event listeners for form submissions.
function setupFormListeners() {
  document.getElementById('new-alert-form').addEventListener('submit', function(event) {
    event.preventDefault();
    submitNewAlert();
  });

  document.getElementById('confirmDeleteButton').addEventListener('click', deleteAlert);
}

function setupEventListeners() {
  document.querySelectorAll('.delete-button').forEach(button => {
    button.addEventListener('click', function() {
      const alertId = this.getAttribute('data-alert-id');
      showConfirmDeleteModal(alertId);
    });
  });
}

function showConfirmDeleteModal(alertId) {
  document.getElementById('confirmDeleteButton').setAttribute('data-alert-id', alertId);
  new bootstrap.Modal(document.getElementById('confirmDeleteModal')).show();
}

// Handles submission of the new alert form.
function submitNewAlert() {
  const serviceName = document.getElementById('serviceName').value;
  const serverAddress = document.getElementById('serverAddress').value;
  const alertType = document.getElementById('alertType').value;
  const channelId = document.getElementById('channelId').value;

  if (validateAlertInputs(alertType, serverAddress)) {
    fetch('/api/alerts/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: serviceName,
          serverAddress,
          type: alertType,
          channelId: channelId
        })
      })
      .then(handleResponse)
      .then(() => {
        showToast('toastSuccess', "New Alert Created");
        document.getElementById('new-alert-form').reset();
        loadAlerts();
      })
      .catch(error => showToast('toastError', "Error creating alert: " + error.message));
  } else {
    document.getElementById('serverAddress').reportValidity();
  }
}

function showToast(type, message) {
  const toastElement = document.getElementById(type);
  const toastBody = toastElement.querySelector('.toast-body');
  toastBody.textContent = message;
  const toast = new bootstrap.Toast(toastElement);
  toast.show();
}

// Handles fetching response and throws error if invalid
function handleResponse(response) {
  if (!response.ok) {
    throw new Error('Network response was invalid: ' + response.statusText);
  }
  return response.json();
}

// Function to update the UI of a single alert based on its status
async function updateAlertUI(alert) {
  let channelName = "Unknown Channel"; // If channel isn't valid

  try {
    channelName = await getChannelName(alert.channelId);
  } catch (error) {
    console.error('Error fetching channel name:', error);
  }

  let alertHTML = `<div class="alert-title">${alert.name}</div>`;

  if (alert.type === 'bots') {
    alertHTML += `
            <div class="alert-info">Bot ID: ${alert.serverAddress}</div>
            <div class="alert-info">Type: Bots</div>
            <div class="alert-info">Channel: ${channelName}</div>`;
  } else if (alert.type === 'website') {
    alertHTML += `
            <div class="alert-info">URL: ${alert.serverAddress}</div>
            <div class="alert-info">Type: Website</div>
            <div class="alert-info">Channel: ${channelName}</div>`;
  } else if (alert.type === 'minecraft') {
    alertHTML += `
            <div class="alert-info">IP: ${alert.serverAddress}</div>
            <div class="alert-info">Type: Minecraft</div>
            <div class="alert-info">Channel: ${channelName}</div>`;
  }

  alertHTML += `
        <div class="alert-info">Status: ${formatStatus(alert.status)}</div>
        <div class="alert-info">Last Checked: ${calculateDuration(alert)}</div>
        <div class="alert-actions">
            <button onclick="showUpdateAlertModal(${alert.alertId}, '${alert.name}', '${alert.serverAddress}', '${alert.type}', '${alert.channelId}')" class="btn btn-primary">Update</button>
            <button onclick="showConfirmDeleteModal(${alert.alertId})" class="btn btn-danger">Delete</button>
        </div>`;

  let alertElement = document.querySelector(`.alert-block[data-alert-id="${alert.alertId}"]`);
  if (!alertElement) {
    alertElement = document.createElement('div');
    alertElement.classList.add('alert-block', 'col-md-4');
    alertElement.setAttribute('data-alert-id', alert.alertId);
    document.getElementById('alerts-list').appendChild(alertElement);
  }

  alertElement.innerHTML = alertHTML;
  alertElement.classList.remove('alert-online', 'alert-offline', 'alert-pending');
  if (alert.status === 'Online') {
    alertElement.classList.add('alert-online');
  } else if (alert.status === 'Offline') {
    alertElement.classList.add('alert-offline');
  } else {
    alertElement.classList.add('alert-pending');
  }
}

function formatStatus(status) {
  if (status === 'pending') {
    return `${status} <span class="loading-icon"></span>`;
  }
  return status;
}

// Function to calculate how long the service has been offline / online
function calculateDuration(alert) {
  if (!alert.lastReported) return "0 minutes ago";
  const lastReportedDate = new Date(alert.lastReported);
  const now = new Date();
  const diff = now - lastReportedDate;
  const minutes = Math.floor(diff / 60000);
  return `${minutes} minutes ago`;
}

// Function to get the channel name from the channel ID
async function getChannelName(channelId) {
  try {
    const response = await fetch(`/api/discord/channel-name/${channelId}`);
    if (!response.ok) {
      throw new Error('Network response was not ok.');
    }
    const data = await response.json();
    return data.name || "Unknown Channel";
  } catch (error) {
    console.error('Error fetching channel name:', error);
    return "Unknown Channel";
  }
}

// Function to load and update alerts from the server
async function loadAlerts() {
  try {
    const response = await fetch('/api/alerts');
    const alerts = await response.json();
    if (alerts.length === 0) {
      document.getElementById('no-alerts-placeholder').style.display = 'block';
    } else {
      document.getElementById('no-alerts-placeholder').style.display = 'none';
      for (const alert of alerts) {
        await updateAlertUI(alert);
      }
    }
  } catch (error) {
    console.error('Error loading alerts:', error);
  }
}

setInterval(() => {
  loadAlerts();
}, 10000);

function showUpdateAlertModal(alertId, name, serverAddress, type, channelId) {
  // Set values for the alert being updated
  document.getElementById('updateAlertId').value = alertId;
  document.getElementById('updateServiceName').value = name;
  document.getElementById('updateServerAddress').value = serverAddress;
  document.getElementById('updateAlertType').value = type;

  // Set channels in the dropdown
  const channelDropdown = document.getElementById('updateChannelId');
  channelDropdown.innerHTML = '';
  fetch('/api/discord/channels')
    .then(response => response.json())
    .then(channels => {
      channels.forEach(channel => {
        const option = document.createElement('option');
        option.value = channel.id;
        option.textContent = channel.name;
        if (channel.id === channelId) {
          option.selected = true;
        }
        channelDropdown.appendChild(option);
      });
    });
  new bootstrap.Modal(document.getElementById('updateAlertModal')).show();
}

// Updates the existing alert.
async function submitUpdateAlert() {
  const alertId = document.getElementById('updateAlertId').value;
  const updatedName = document.getElementById('updateServiceName').value;
  const updatedServerAddress = document.getElementById('updateServerAddress').value;
  const updatedType = document.getElementById('updateAlertType').value;
  const updatedChannelId = document.getElementById('updateChannelId').value;

  if (!validateAlertInputs(updatedType, updatedServerAddress)) {
    document.getElementById('updateServerAddress').reportValidity();
    return;
  }

  try {
    const response = await fetch(`/api/alerts/update`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        alertId,
        name: updatedName,
        serverAddress: updatedServerAddress,
        type: updatedType,
        channelId: updatedChannelId
      })
    });

    const data = await response.json();
    if (response.ok && data.message === "Alert updated successfully") {
      showToast('toastSuccess', "Alert has been updated");
      await loadAlerts(); // refresh the alerts
      // Closes the form
      $('#updateAlertModal').modal('hide');
    } else {
      showToast('toastError', data.error || "Failed to update alert");
    }
  } catch (error) {
    showToast('toastError', "Error updating alert: " + error.message);
  } finally {
    bootstrap.Modal.getInstance(document.getElementById('updateAlertModal')).hide();
  }
}

// Deletes the alert based on the alert id, which is a hidden field 
async function deleteAlert() {
  const alertId = document.getElementById('confirmDeleteButton').getAttribute('data-alert-id');
  try {
    const response = await fetch(`/api/alerts/delete`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        alertId: alertId
      })
    });

    const data = await response.json();
    if (response.ok && data.message === "Alert deleted successfully") {
      showToast('toastDelete', "Alert has been deleted");
      document.querySelector(`.alert-block[data-alert-id="${alertId}"]`)?.remove();
      // Closes the delete form
      $('#confirmDeleteModal').modal('hide');
    } else {
      showToast('toastError', "Alert deletion failed or alert was not found");
    }
  } catch (error) {
    showToast('toastError', "Error deleting alert: " + error.message);
  }
}

loadChannels();

</script>

<div id="footer">
    <%- include('partials/footer') %>
</div>
</body>

</html>
